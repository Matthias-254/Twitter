name: CI/CD Pipeline with TDD (Laravel)

# **Continuous Integration**: On every push to the main branch, GitHub Actions will automatically: Install dependencies, Run tests using PHPUnit.

# Trigger pipelines on specific branches (dev, test, prod)
on:
  push:
    branches:
      - Apache
      - breeze-fix
      - Test
      - main
  pull_request:
    branches:
      - Apache
      - breeze-fix
      - Test
      - main


jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Ensure .env File Exists
        run: |
          if [ ! -f .env ]; then
            if [ -f .env.example ]; then
              cp .env.example .env
            else
              echo "Missing .env.example file!"
              exit 1
            fi
          fi

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate application key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute Tests (Unit and Feature Tests) via PHPUnit/Pest
        env:
          DB_CONNECTION: mysql
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: sudo /etc/init.d/mysql start
             php artisan test

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18' # Ensure Node.js 17 or higher
          

      - name: Install NPM Dependencies
        run: npm install

      - name: Build Assets
        run: npm run build  
        
  deploy-dev:
    runs-on: ubuntu-latest
    needs: laravel-tests
    if: github.ref == 'refs/heads/Apache'
    steps:
      - name: Deploy to Development
        run: |
          echo "Deploying to Development Environment..."
          # Add commands or scripts to deploy to development servers
          # Example: scp or SSH commands to copy files to the dev server
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEV_USER }}@${{ secrets.DEV_HOST }} << 'EOF'
          cd /path/to/dev/application
          git pull origin Apache
          composer install --no-dev
          php artisan migrate --force
          php artisan cache:clear
          php artisan config:clear
          EOF

  deploy-test:
    runs-on: ubuntu-latest
    needs: laravel-tests
    if: github.ref == 'refs/heads/Test'
    steps:
      - name: Deploy to Testing
        run: |
          echo "Deploying to Testing Environment..."
          # Add commands or scripts to deploy to test servers
          ssh -o StrictHostKeyChecking=no ${{ secrets.TEST_USER }}@${{ secrets.TEST_HOST }} << 'EOF'
          cd /path/to/test/application
          git pull origin Test
          composer install --no-dev
          php artisan migrate --force
          php artisan cache:clear
          php artisan config:clear
          EOF              
          
  deploy-prod:
    runs-on: ubuntu-latest
    needs: laravel-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying to Production Environment..."
          # Add commands or scripts to deploy to production servers
          ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} << 'EOF'
          cd /path/to/prod/application
          git pull origin main
          composer install --no-dev
          php artisan migrate --force
          php artisan cache:clear
          php artisan config:clear
          EOF
  tdd-checks:
     runs-on: ubuntu-latest
     needs: laravel-tests
     steps:
      # **TDD Principle: Checking Failing Tests**
      # This step is a placeholder to enforce TDD, ensuring failing tests were written
      # and then fixed. In practice, you'd implement logic or require manual review
      # to confirm adherence to TDD principles.
      - name: Check for Resolved Tests
        run: |
          echo "Ensuring TDD principles are met..."
          
